# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  workflow_dispatch:
    # inputs:
    #   release-artifact:
    #     description: "Manually creates the .jar artifact"
    #     required: false
    #     type: boolean
    #     default: false

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      with:
        gradle-version: '8.5'

    - name: Build with Gradle 8.5
      run: gradle build

    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v4
      id: semantic
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Determine Docker Image Tag
      id: docker_tag
      run: |
        if [ "${{ steps.semantic.outputs.new_release_published }}" = "true" ]; then
          "IMAGE_TAG=v${{ steps.semantic.outputs.new_release_version }}"
        else
          GIT_TAG=$(git describe --tags --abbrev=0 2>/dev/null) || true
          if [ -z "$GIT_TAG" ]; then
            # If there are no git tags, set the default image tag
            IMAGE_TAG="v0.0.0"
          else
            IMAGE_TAG="$GIT_TAG"
          fi
        fi
        echo "IMAGE_TAG=$IMAGE_TAG" > variables.env
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Log in to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    
    - name: Build and push Docker backend-image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/prod:app-${{ env.IMAGE_TAG }}
        
    - name: Build and push Docker db-image
      uses: docker/build-push-action@v2
      with:
        context: ./db
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/db:db-${{ env.IMAGE_TAG }}

    - name: Artifact Creation
      uses: actions/upload-artifact@v4.3.3
      with:
        name: env-file
        path: variables.env
        
