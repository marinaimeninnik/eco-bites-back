# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Chose environment to deploy"
        required: true
        type: choice
        options:
          - dev
          # - prod

permissions:
  contents: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      with:
        gradle-version: '8.5'

    - name: Build with Gradle 8.5
      run: gradle build

    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v4
      id: semantic
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.ROLE_ARN }}
        role-session-name: github-actions-labsadm
        aws-region: ${{ vars.AWS_REGION }}

    - name: Determine Docker Image Tag
      id: docker_tag
      run: |
        IMAGE_TAG="v0.0.0"
        if [ "${{ steps.semantic.outputs.new_release_published }}" = "true" ]; then
          echo "IMAGE_TAG=v${{ steps.semantic.outputs.new_release_version }}" | tee -a $GITHUB_OUTPUT > variables.env
        else
          echo "IMAGE_TAG=$(git describe --tags --abbrev=0)" | tee -a $GITHUB_OUTPUT > variables.env
        fi
        cat variables.env >> $GITHUB_ENV

    - name: Login to Amazon ECR
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public

    - name: Build, tag, and push app-docker image to Amazon ECR Public
      env:
        IMAGE_TAG: ${{ steps.docker_tag.outputs.IMAGE_TAG }}
        REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        REGISTRY_ALIAS: ${{ vars.ECR_ALIAS }}
        REPOSITORY: ${{ vars.ECR_NAME }}
        PREFIX: app
      run: |
        docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$PREFIX-$IMAGE_TAG .
        docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$PREFIX-$IMAGE_TAG

    - name: Build, tag, and push db-docker image to Amazon ECR Public
      env:
        IMAGE_TAG: ${{ steps.docker_tag.outputs.IMAGE_TAG }}
        REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        REGISTRY_ALIAS: ${{ vars.ECR_ALIAS }}
        REPOSITORY: ${{ vars.ECR_NAME }}
        PREFIX: db
      run: |
        docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$PREFIX-$IMAGE_TAG db
        docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$PREFIX-$IMAGE_TAG

  check_stage:
    runs-on: ubuntu-latest
    steps:
      - name: Check image pass
        run: |
          echo 'image tag is needs ${{ needs.build.outputs.IMAGE_TAG }}'
          echo 'image tag is env ${{ env.IMAGE_TAG }}'


  deliver:
    needs: build
    uses: marinaimeninnik/eco-bites-infra/.github/workflows/infra-create.yaml@back-deployment
    permissions:
      id-token: write
      contents: read
    with:
      environment: ${{ github.event.inputs.environment }}
      image_tag:  ${{ needs.build.outputs.IMAGE_TAG }}

